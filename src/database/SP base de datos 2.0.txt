
Use sistemaregistro1;

DELIMITER //

CREATE PROCEDURE SP_insertarAspirante(
    IN p_nombre VARCHAR(100),
    IN p_apellido VARCHAR(100),
    IN p_documento VARCHAR(50),
    IN p_telefono VARCHAR(20),
    IN p_correo VARCHAR(100),
    IN p_foto VARCHAR(255),
    IN p_fotodni VARCHAR(255),
    IN p_carrera_principal_id INT,
    IN p_carrera_secundaria_id INT,
    IN p_centro_id INT,
    IN p_certificado_url VARCHAR(255),
    IN p_tipo_documento_id INT
)
BEGIN
    DECLARE v_numSolicitud VARCHAR(50);
    DECLARE v_estado_aspirante_id INT;

    -- Verificar si ya existe un aspirante con el mismo documento
    IF (SELECT COUNT(*) FROM Aspirante WHERE documento = p_documento) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El aspirante ya ha sido inscrito';
    END IF;
    
    -- Obtener el estado_aspirante_id para 'PENDIENTE'
    SELECT estado_aspirante_id INTO v_estado_aspirante_id
    FROM EstadoAspirante
    WHERE nombre = 'PENDIENTE';

    -- Si no existe, crear el estado 'PENDIENTE'
    IF v_estado_aspirante_id IS NULL THEN
        INSERT INTO EstadoAspirante (nombre) VALUES ('PENDIENTE');
        SET v_estado_aspirante_id = LAST_INSERT_ID();
    END IF;

    -- Generar el número de solicitud con prefijo 'SOL-' y 10 caracteres aleatorios
    SET v_numSolicitud = CONCAT('SOL-', 
        UPPER(CONCAT(
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1),
            SUBSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', FLOOR(RAND() * 36) + 1, 1)
        ))
    );

    -- Insertar en la tabla Aspirante
    INSERT INTO Aspirante (
        nombre, apellido, documento, telefono, correo, foto, fotodni, numSolicitud,
        carrera_principal_id, carrera_secundaria_id, centro_id, certificado_url,
        estado_aspirante_id, tipo_documento_id, fecha_solicitud
    ) VALUES (
        p_nombre, p_apellido, p_documento, p_telefono, p_correo, p_foto, p_fotodni, v_numSolicitud,
        p_carrera_principal_id, p_carrera_secundaria_id, p_centro_id, p_certificado_url,
        v_estado_aspirante_id, p_tipo_documento_id, CURDATE()
    );
    
    -- Devolver el número de solicitud generado
    SELECT v_numSolicitud AS numSolicitud;
END //

DELIMITER ;




DELIMITER //

CREATE PROCEDURE SP_asignarUsuarioDocente(
    IN p_docente_id INT,
    IN p_username VARCHAR(100),
    IN p_password VARCHAR(100)
)
BEGIN
    DECLARE v_rol_id INT;
    DECLARE v_usuario_id INT;

    -- Verificar que el docente exista y que aún no tenga usuario asignado
    IF (SELECT COUNT(*) FROM Docente WHERE docente_id = p_docente_id AND usuario_id IS NOT NULL) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El docente ya tiene credenciales asignadas';
    END IF;

    -- Obtener el rol "docente"
    SELECT rol_id INTO v_rol_id FROM Rol WHERE nombre = 'docente' LIMIT 1;
    IF v_rol_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Rol docente no encontrado en el sistema';
    END IF;

    -- Insertar el nuevo usuario en la tabla Usuario
    INSERT INTO Usuario (username, password, rol_id)
    VALUES (p_username, p_password, v_rol_id);
    
    -- Obtener el ID del usuario recién insertado
    SET v_usuario_id = LAST_INSERT_ID();
    
    -- Actualizar el registro del docente para asignarle el usuario
    UPDATE Docente
    SET usuario_id = v_usuario_id
    WHERE docente_id = p_docente_id;
    
    -- Retornar mensaje de éxito
    SELECT 'Credenciales correctamente asignadas' AS mensaje;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE SP_crearSeccion(
    IN p_clase_id INT,
    IN p_docente_id INT,
    IN p_periodo_academico_id INT,
    IN p_aula_id INT,
    IN p_hora_inicio TIME,
    IN p_hora_fin TIME,
    IN p_cupos INT,
    IN p_dias VARCHAR(255),  -- Cadena de días separados por comas (ej: "1,2,3")
    IN p_video_url VARCHAR(255)
)
BEGIN
    DECLARE v_creditos INT;
    DECLARE v_duracion DECIMAL(5,2);
    DECLARE v_numDias INT;
    DECLARE v_totalDays INT;
    DECLARE v_counter INT DEFAULT 1;
    DECLARE v_day INT;
    DECLARE v_section_id INT;
    DECLARE v_estado_proceso VARCHAR(30);
    DECLARE v_capacidad_aula INT;
    DECLARE v_estado_seccion_id INT;
    DECLARE v_conflictos INT DEFAULT 0;
    
    -- Asignar valor por defecto si video_url es NULL
    IF p_video_url IS NULL THEN
        SET p_video_url = 'DEFAULT_VIDEO_URL';
    END IF;

    -- Validar parámetros obligatorios
    IF p_clase_id IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El ID de la clase no puede estar vacío';
    END IF;

    IF p_docente_id IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El ID del docente no puede estar vacío';
    END IF;

    -- Verificar que el período académico esté activo
    SELECT ep.nombre INTO v_estado_proceso
    FROM PeriodoAcademico pa
    JOIN EstadoProceso ep ON pa.estado_proceso_id = ep.estado_proceso_id
    WHERE pa.periodo_academico_id = p_periodo_academico_id;

    IF v_estado_proceso <> 'ACTIVO' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El período académico no está activo';
    END IF;

    -- Verificar que la hora de inicio sea menor a la de fin
    IF p_hora_inicio >= p_hora_fin THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La hora de inicio debe ser menor a la hora de fin';
    END IF;

    -- Obtener créditos de la clase
    SELECT creditos INTO v_creditos FROM Clase WHERE clase_id = p_clase_id;
    IF v_creditos IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Clase no encontrada';
    END IF;

    -- Verificar capacidad del aula
    SELECT capacidad INTO v_capacidad_aula FROM Aula WHERE aula_id = p_aula_id;
    IF v_capacidad_aula IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Aula no encontrada';
    END IF;
    
    IF p_cupos > v_capacidad_aula THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT ='Los cupos exceden la capacidad del aula';
    END IF;

    -- Calcular duración en horas
    SET v_duracion = (TIME_TO_SEC(p_hora_fin) - TIME_TO_SEC(p_hora_inicio)) / 3600;

    -- Calcular número de días recibido (cadena separada por comas)
    IF p_dias = '' THEN
        SET v_numDias = 0;
    ELSE
        SET v_numDias = LENGTH(p_dias) - LENGTH(REPLACE(p_dias, ',', '')) + 1;
    END IF;
    SET v_totalDays = v_numDias;

    IF v_totalDays = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Debe especificarse al menos un día';
    END IF;

    -- Validar la regla según la cantidad de días y créditos:
    IF v_totalDays > 1 THEN
        IF v_totalDays <> v_creditos THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El número de días no coincide con los créditos de la clase';
        END IF;
        IF ABS(v_duracion - 1) > 0.01 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Para secciones en varios días, cada sesión debe durar 1 hora';
        END IF;
    ELSEIF v_totalDays = 1 THEN
        IF ABS(v_duracion - v_creditos) > 0.01 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Para secciones en un solo día, la duración total debe ser igual a los créditos de la clase';
        END IF;
    END IF;

    -- Obtener ID del estado "ACTIVA" para la inserción
    SELECT estado_seccion_id INTO v_estado_seccion_id
    FROM EstadoSeccion
    WHERE nombre = 'ACTIVA';
    
    IF v_estado_seccion_id IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se encontró el estado ACTIVA en la tabla EstadoSeccion';
    END IF;

    -- Verificar conflictos para cada día
    SET v_counter = 1;
    WHILE v_counter <= v_totalDays DO
        SET v_day = CAST(TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(p_dias, ',', v_counter), ',', -1)) AS UNSIGNED);

        -- Verificar traslape en el aula con otras secciones
        SELECT COUNT(*) INTO v_conflictos
        FROM Seccion s
        JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
        JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
        WHERE s.aula_id = p_aula_id
          AND sd.dia_id = v_day
          AND s.periodo_academico_id = p_periodo_academico_id
          AND es.nombre = 'ACTIVA'
          AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(s.hora_fin)
          AND (TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(s.hora_inicio)));
        
        IF v_conflictos > 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Conflicto de horario con otra sección en el aula';
        END IF;

        -- Verificar traslape en el aula con laboratorios
        SELECT COUNT(*) INTO v_conflictos
        FROM Laboratorio l
        JOIN LaboratorioDia ld ON l.laboratorio_id = ld.laboratorio_id
        JOIN EstadoSeccion es ON l.estado_seccion_id = es.estado_seccion_id
        WHERE l.aula_id = p_aula_id
          AND ld.dia_id = v_day
          AND l.periodo_academico_id = p_periodo_academico_id
          AND es.nombre = 'ACTIVA'
          AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(l.hora_fin))
          AND (TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(l.hora_inicio));
        
        IF v_conflictos > 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Conflicto de horario con un laboratorio en el aula';
        END IF;

        -- Verificar traslape en el docente
        SELECT COUNT(*) INTO v_conflictos
        FROM Seccion s
        JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
        JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
        WHERE s.docente_id = p_docente_id
          AND sd.dia_id = v_day
          AND s.periodo_academico_id = p_periodo_academico_id
          AND es.nombre = 'ACTIVA'
          AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(s.hora_fin))
          AND (TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(s.hora_inicio));
        
        IF v_conflictos > 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El docente ya tiene una sección asignada en ese horario';
        END IF;

        SET v_counter = v_counter + 1;
    END WHILE;

    -- Insertar la sección (incluyendo cupos)
    INSERT INTO Seccion (
        clase_id, docente_id, periodo_academico_id, hora_inicio, hora_fin, 
        aula_id, estado_seccion_id, cupos, video_url
    )
    VALUES (
        p_clase_id, p_docente_id, p_periodo_academico_id, p_hora_inicio, 
        p_hora_fin, p_aula_id, v_estado_seccion_id, p_cupos, 
        p_video_url
    );
    SET v_section_id = LAST_INSERT_ID();

    -- Insertar cada día en la tabla SeccionDia
    SET v_counter = 1;
    WHILE v_counter <= v_totalDays DO
        SET v_day = CAST(TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(p_dias, ',', v_counter), ',', -1)) AS UNSIGNED);
        INSERT INTO SeccionDia (seccion_id, dia_id) VALUES (v_section_id, v_day);
        SET v_counter = v_counter + 1;
    END WHILE;

    -- Devolver el ID de la sección creada
    SELECT v_section_id AS seccion_id;
END //

DELIMITER ;




DELIMITER //

CREATE PROCEDURE SP_modificarSeccion(
    IN p_seccion_id INT,
    IN p_docente_id INT,
    IN p_aula_id INT,
    IN p_estado VARCHAR(20),
    IN p_motivo_cancelacion TEXT,
    IN p_cupos INT,
    IN p_video_url VARCHAR(255)
)
BEGIN
    DECLARE v_estado_seccion_id INT;
    DECLARE v_capacidad_aula INT;
    DECLARE v_hora_inicio TIME;
    DECLARE v_hora_fin TIME;
    DECLARE v_periodo_academico_id INT;
    DECLARE v_dias_seccion VARCHAR(255);
    DECLARE v_current_aula_id INT;
    DECLARE v_current_docente_id INT;
    DECLARE v_clase_id INT;
    DECLARE v_conflict_count INT DEFAULT 0;
    DECLARE v_current_estado VARCHAR(20);
    
    -- Validar parámetros obligatorios
    IF p_seccion_id IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El ID de la sección no puede estar vacío';
    END IF;

    -- Obtener información actual de la sección para validaciones
    SELECT 
        s.hora_inicio, s.hora_fin, s.periodo_academico_id, 
        s.aula_id, s.docente_id, s.clase_id, es.nombre,
        GROUP_CONCAT(sd.dia_id ORDER BY sd.dia_id SEPARATOR ',')
    INTO 
        v_hora_inicio, v_hora_fin, v_periodo_academico_id,
        v_current_aula_id, v_current_docente_id, v_clase_id, v_current_estado,
        v_dias_seccion
    FROM Seccion s
    LEFT JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
    JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
    WHERE s.seccion_id = p_seccion_id
    GROUP BY s.seccion_id;
    
    IF v_hora_inicio IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Sección no encontrada';
    END IF;

    -- Validar capacidad del aula si se cambian cupos o aula
    IF p_cupos IS NOT NULL OR p_aula_id IS NOT NULL THEN
        -- Determinar qué aula verificar (la nueva o la actual)
        SET v_current_aula_id = COALESCE(p_aula_id, v_current_aula_id);
        
        SELECT capacidad INTO v_capacidad_aula 
        FROM Aula 
        WHERE aula_id = v_current_aula_id;
        
        IF v_capacidad_aula IS NULL THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El aula especificada no existe';
        END IF;
        
        IF p_cupos IS NOT NULL AND p_cupos > v_capacidad_aula THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT ='Los cupos exceden la capacidad del aula';
        END IF;
    END IF;

    -- Si se intenta cancelar, se requiere un motivo de cancelación
    IF p_estado = 'CANCELADA' AND (p_motivo_cancelacion IS NULL OR TRIM(p_motivo_cancelacion) = '') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Debe proporcionar motivo de cancelación';
    END IF;

    -- Obtener el estado_seccion_id correspondiente al nombre proporcionado
    IF p_estado IS NOT NULL THEN
        SELECT estado_seccion_id INTO v_estado_seccion_id
        FROM EstadoSeccion
        WHERE nombre = p_estado;
        
        IF v_estado_seccion_id IS NULL THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Estado de sección inválido. Use ACTIVA o CANCELADA';
        END IF;
    END IF;

    -- Validar conflictos de horario si se cambia aula o docente
    IF p_aula_id IS NOT NULL OR p_docente_id IS NOT NULL THEN
        -- Determinar qué aula y docente verificar (los nuevos o los actuales)
        SET v_current_aula_id = COALESCE(p_aula_id, v_current_aula_id);
        SET v_current_docente_id = COALESCE(p_docente_id, v_current_docente_id);
        
        -- Verificar conflictos para el aula (si se cambia)
        IF p_aula_id IS NOT NULL THEN
            -- Verificar conflictos con otras secciones
            SELECT COUNT(*) INTO v_conflict_count
            FROM Seccion s
            JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
            JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
            WHERE s.aula_id = v_current_aula_id
              AND s.seccion_id != p_seccion_id
              AND s.periodo_academico_id = v_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND FIND_IN_SET(sd.dia_id, v_dias_seccion) > 0
              AND (TIME_TO_SEC(v_hora_inicio) < TIME_TO_SEC(s.hora_fin) AND 
                   TIME_TO_SEC(v_hora_fin) > TIME_TO_SEC(s.hora_inicio));
            
            IF v_conflict_count > 0 THEN
                SIGNAL SQLSTATE '45000' 
                SET MESSAGE_TEXT = 'El aula tiene un conflicto de horario con otra sección activa';
            END IF;
            
            -- Verificar conflictos con laboratorios
            SELECT COUNT(*) INTO v_conflict_count
            FROM Laboratorio l
            JOIN LaboratorioDia ld ON l.laboratorio_id = ld.laboratorio_id
            JOIN EstadoSeccion es ON l.estado_seccion_id = es.estado_seccion_id
            WHERE l.aula_id = v_current_aula_id
              AND l.periodo_academico_id = v_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND FIND_IN_SET(ld.dia_id, v_dias_seccion) > 0
              AND (TIME_TO_SEC(v_hora_inicio) < TIME_TO_SEC(l.hora_fin) AND 
                   TIME_TO_SEC(v_hora_fin) > TIME_TO_SEC(l.hora_inicio));
            
            IF v_conflict_count > 0 THEN
                SIGNAL SQLSTATE '45000' 
                SET MESSAGE_TEXT = 'El aula tiene un conflicto de horario con un laboratorio activo';
            END IF;
        END IF;
        
        -- Verificar conflictos para el docente (si se cambia)
        IF p_docente_id IS NOT NULL THEN
            SELECT COUNT(*) INTO v_conflict_count
            FROM Seccion s
            JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
            JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
            WHERE s.docente_id = v_current_docente_id
              AND s.seccion_id != p_seccion_id
              AND s.periodo_academico_id = v_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND FIND_IN_SET(sd.dia_id, v_dias_seccion) > 0
              AND (TIME_TO_SEC(v_hora_inicio) < TIME_TO_SEC(s.hora_fin) AND 
                   TIME_TO_SEC(v_hora_fin) > TIME_TO_SEC(s.hora_inicio));
            
            IF v_conflict_count > 0 THEN
                SIGNAL SQLSTATE '45000' 
                SET MESSAGE_TEXT = 'El docente ya tiene una sección activa en el mismo horario y días';
            END IF;
        END IF;
    END IF;

    -- Actualizar la sección con los nuevos valores
    UPDATE Seccion
    SET 
        docente_id = COALESCE(p_docente_id, docente_id),
        aula_id = COALESCE(p_aula_id, aula_id),
        estado_seccion_id = COALESCE(v_estado_seccion_id, estado_seccion_id),
        motivo_cancelacion = CASE 
            WHEN p_estado = 'CANCELADA' THEN p_motivo_cancelacion
            WHEN p_estado = 'ACTIVA' THEN NULL -- Limpiar motivo si se reactiva
            ELSE motivo_cancelacion
        END,
        cupos = COALESCE(p_cupos, cupos),
        video_url = COALESCE(p_video_url, video_url)
    WHERE seccion_id = p_seccion_id;

    -- Si no se actualizó ninguna fila, se lanza un error
    IF ROW_COUNT() = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se realizaron cambios en la sección';
    END IF;
    
    -- Si se está reactivando la sección, verificar que no haya conflictos
    IF p_estado = 'ACTIVA' AND v_current_estado != 'ACTIVA' THEN
        -- Verificar conflictos con otras secciones
        SELECT COUNT(*) INTO v_conflict_count
        FROM Seccion s
        JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
        JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
        WHERE s.aula_id = COALESCE(p_aula_id, v_current_aula_id)
          AND s.seccion_id != p_seccion_id
          AND s.periodo_academico_id = v_periodo_academico_id
          AND es.nombre = 'ACTIVA'
          AND FIND_IN_SET(sd.dia_id, v_dias_seccion) > 0
          AND (TIME_TO_SEC(v_hora_inicio) < TIME_TO_SEC(s.hora_fin) AND 
               TIME_TO_SEC(v_hora_fin) > TIME_TO_SEC(s.hora_inicio));
        
        IF v_conflict_count > 0 THEN
            -- Revertir la activación
            UPDATE Seccion
            SET estado_seccion_id = (SELECT estado_seccion_id FROM EstadoSeccion WHERE nombre = 'CANCELADA'),
                motivo_cancelacion = 'Activación revertida por conflicto de horario'
            WHERE seccion_id = p_seccion_id;
            
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'No se puede reactivar: conflicto de horario con otra sección activa';
        END IF;
        
        -- Verificar conflictos con laboratorios
        SELECT COUNT(*) INTO v_conflict_count
        FROM Laboratorio l
        JOIN LaboratorioDia ld ON l.laboratorio_id = ld.laboratorio_id
        JOIN EstadoSeccion es ON l.estado_seccion_id = es.estado_seccion_id
        WHERE l.aula_id = COALESCE(p_aula_id, v_current_aula_id)
          AND l.periodo_academico_id = v_periodo_academico_id
          AND es.nombre = 'ACTIVA'
          AND FIND_IN_SET(ld.dia_id, v_dias_seccion) > 0
          AND (TIME_TO_SEC(v_hora_inicio) < TIME_TO_SEC(l.hora_fin) AND 
               TIME_TO_SEC(v_hora_fin) > TIME_TO_SEC(l.hora_inicio));
        
        IF v_conflict_count > 0 THEN
            -- Revertir la activación
            UPDATE Seccion
            SET estado_seccion_id = (SELECT estado_seccion_id FROM EstadoSeccion WHERE nombre = 'CANCELADA'),
                motivo_cancelacion = 'Activación revertida por conflicto con laboratorio'
            WHERE seccion_id = p_seccion_id;
            
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'No se puede reactivar: conflicto de horario con laboratorio activo';
        END IF;
    END IF;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE SP_crearLaboratorio(
    IN p_clase_id INT,
    IN p_codigo_laboratorio VARCHAR(50),
    IN p_periodo_academico_id INT,
    IN p_hora_inicio TIME,
    IN p_hora_fin TIME,
    IN p_aula_id INT,
    IN p_cupos INT,
    IN p_dias_json JSON  -- JSON array de IDs de días, ej: '[1,3,5]' para Lunes, Miércoles, Viernes
)
BEGIN
    DECLARE v_tiene_laboratorio BOOLEAN;
    DECLARE v_capacidad_aula INT;
    DECLARE v_laboratorio_id INT;
    DECLARE v_dia_id INT;
    DECLARE v_i INT DEFAULT 0;
    DECLARE v_dias_count INT;
    DECLARE v_aula_tiene_conflictos BOOLEAN DEFAULT FALSE;
    
    -- Validar que la clase existe y tiene laboratorio
    SELECT tiene_laboratorio INTO v_tiene_laboratorio
    FROM Clase WHERE clase_id = p_clase_id;
    
    IF v_tiene_laboratorio IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La clase no existe';
    ELSEIF v_tiene_laboratorio = FALSE THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La clase no tiene laboratorio asociado';
    END IF;
    
    -- Validar capacidad del aula
    SELECT capacidad INTO v_capacidad_aula 
    FROM Aula WHERE aula_id = p_aula_id;
    
    IF v_capacidad_aula IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El aula no existe';
    ELSEIF p_cupos > v_capacidad_aula THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Los cupos exceden la capacidad del aula';
    END IF;
    
    -- Validar que el aula no tenga conflictos con secciones o laboratorios existentes
    SET v_dias_count = JSON_LENGTH(p_dias_json);
    
    WHILE v_i < v_dias_count DO
        SET v_dia_id = JSON_EXTRACT(p_dias_json, CONCAT('$[', v_i, ']'));
        
        -- Verificar conflictos con secciones
        SET v_aula_tiene_conflictos = EXISTS (
            SELECT 1
            FROM Seccion s
            JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
            JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
            WHERE s.aula_id = p_aula_id
              AND s.periodo_academico_id = p_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND sd.dia_id = v_dia_id
              AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(s.hora_fin) AND 
                   TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(s.hora_inicio))
        );
        
        IF v_aula_tiene_conflictos THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'El aula tiene un conflicto de horario con una sección existente';
        END IF;
        
        -- Verificar conflictos con otros laboratorios
        SET v_aula_tiene_conflictos = EXISTS (
            SELECT 1
            FROM Laboratorio l
            JOIN LaboratorioDia ld ON l.laboratorio_id = ld.laboratorio_id
            JOIN EstadoSeccion es ON l.estado_seccion_id = es.estado_seccion_id
            WHERE l.aula_id = p_aula_id
              AND l.periodo_academico_id = p_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND ld.dia_id = v_dia_id
              AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(l.hora_fin) AND 
                   TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(l.hora_inicio))
        );
        
        IF v_aula_tiene_conflictos THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'El aula tiene un conflicto de horario con otro laboratorio existente';
        END IF;
        
        SET v_i = v_i + 1;
    END WHILE;
    
    -- Obtener ID de estado ACTIVA
    SELECT estado_seccion_id INTO @estado_activo 
    FROM EstadoSeccion WHERE nombre = 'ACTIVA';
    
    IF @estado_activo IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se encontró el estado ACTIVA';
    END IF;
    
    -- Insertar el laboratorio
    INSERT INTO Laboratorio (
        clase_id,
        codigo_laboratorio,
        periodo_academico_id,
        hora_inicio,
        hora_fin,
        aula_id,
        estado_seccion_id,
        cupos
    ) VALUES (
        p_clase_id,
        p_codigo_laboratorio,
        p_periodo_academico_id,
        p_hora_inicio,
        p_hora_fin,
        p_aula_id,
        @estado_activo,
        p_cupos
    );
    
    SET v_laboratorio_id = LAST_INSERT_ID();
    
    -- Insertar los días del laboratorio
    SET v_i = 0;
    WHILE v_i < v_dias_count DO
        SET v_dia_id = JSON_EXTRACT(p_dias_json, CONCAT('$[', v_i, ']'));
        
        INSERT INTO LaboratorioDia (laboratorio_id, dia_id)
        VALUES (v_laboratorio_id, v_dia_id);
        
        SET v_i = v_i + 1;
    END WHILE;
    
    SELECT v_laboratorio_id AS laboratorio_id;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE SP_modificarLaboratorio(
    IN p_laboratorio_id INT,
    IN p_aula_id INT,
    IN p_estado VARCHAR(20),
    IN p_motivo_cancelacion TEXT,
    IN p_cupos INT,
    IN p_hora_inicio TIME,
    IN p_hora_fin TIME,
    IN p_dias_json JSON  -- JSON array de IDs de días (ej: '[1,3]')
)
BEGIN
    DECLARE v_capacidad_aula INT;
    DECLARE v_current_hora_inicio TIME;
    DECLARE v_current_hora_fin TIME;
    DECLARE v_periodo_academico_id INT;
    DECLARE v_current_aula_id INT;
    DECLARE v_current_estado VARCHAR(20);
    DECLARE v_estado_seccion_id INT;
    DECLARE v_conflict_count INT DEFAULT 0;
    DECLARE v_dia_id INT;
    DECLARE v_i INT DEFAULT 0;
    DECLARE v_dias_count INT;
    DECLARE v_current_dias_json JSON;
    
    -- Validar parámetros obligatorios
    IF p_laboratorio_id IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El ID del laboratorio no puede estar vacío';
    END IF;

    -- Obtener información actual del laboratorio para validaciones
    SELECT 
        l.hora_inicio, l.hora_fin, l.periodo_academico_id, 
        l.aula_id, es.nombre, l.cupos,
        (SELECT JSON_ARRAYAGG(dia_id) FROM LaboratorioDia WHERE laboratorio_id = p_laboratorio_id)
    INTO 
        v_current_hora_inicio, v_current_hora_fin, v_periodo_academico_id,
        v_current_aula_id, v_current_estado, v_capacidad_aula,
        v_current_dias_json
    FROM Laboratorio l
    JOIN EstadoSeccion es ON l.estado_seccion_id = es.estado_seccion_id
    WHERE l.laboratorio_id = p_laboratorio_id;
    
    IF v_current_hora_inicio IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Laboratorio no encontrado';
    END IF;

    -- Usar valores nuevos o mantener los actuales si no se proporcionan
    SET p_hora_inicio = COALESCE(p_hora_inicio, v_current_hora_inicio);
    SET p_hora_fin = COALESCE(p_hora_fin, v_current_hora_fin);
    SET p_aula_id = COALESCE(p_aula_id, v_current_aula_id);
    SET p_dias_json = COALESCE(p_dias_json, v_current_dias_json);
    SET p_cupos = COALESCE(p_cupos, v_capacidad_aula);

    -- Validar que la hora de inicio sea menor a la de fin
    IF p_hora_inicio >= p_hora_fin THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La hora de inicio debe ser menor a la hora de fin';
    END IF;

    -- Validar capacidad del aula
    SELECT capacidad INTO v_capacidad_aula 
    FROM Aula 
    WHERE aula_id = p_aula_id;
    
    IF v_capacidad_aula IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El aula especificada no existe';
    END IF;
    
    IF p_cupos > v_capacidad_aula THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Los cupos exceden la capacidad del aula';
    END IF;

    -- Si se intenta cancelar, se requiere un motivo de cancelación
    IF p_estado = 'CANCELADA' AND (p_motivo_cancelacion IS NULL OR TRIM(p_motivo_cancelacion) = '') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Debe proporcionar motivo de cancelación';
    END IF;

    -- Obtener el estado_seccion_id correspondiente al nombre proporcionado
    IF p_estado IS NOT NULL THEN
        SELECT estado_seccion_id INTO v_estado_seccion_id
        FROM EstadoSeccion
        WHERE nombre = p_estado;
        
        IF v_estado_seccion_id IS NULL THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Estado inválido. Use ACTIVA o CANCELADA';
        END IF;
    END IF;

    -- Validar conflictos de horario si se cambia aula, horario o días
    IF p_aula_id IS NOT NULL OR p_hora_inicio IS NOT NULL OR p_hora_fin IS NOT NULL OR p_dias_json IS NOT NULL THEN
        -- Verificar formato de días
        SET v_dias_count = JSON_LENGTH(p_dias_json);
        IF v_dias_count = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Debe especificarse al menos un día';
        END IF;
        
        -- Verificar conflictos para cada día
        WHILE v_i < v_dias_count DO
            SET v_dia_id = JSON_EXTRACT(p_dias_json, CONCAT('$[', v_i, ']'));
            
            -- Verificar conflictos con secciones
            SELECT COUNT(*) INTO v_conflict_count
            FROM Seccion s
            JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
            JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
            WHERE s.aula_id = p_aula_id
              AND s.periodo_academico_id = v_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND sd.dia_id = v_dia_id
              AND s.seccion_id != p_laboratorio_id  -- Excluir el propio laboratorio si se está modificando
              AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(s.hora_fin)
              AND (TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(s.hora_inicio)));
            
            IF v_conflict_count > 0 THEN
                SIGNAL SQLSTATE '45000' 
                SET MESSAGE_TEXT = 'Conflicto de horario con una sección activa';
            END IF;
            
            -- Verificar conflictos con otros laboratorios
            SELECT COUNT(*) INTO v_conflict_count
            FROM Laboratorio l
            JOIN LaboratorioDia ld ON l.laboratorio_id = ld.laboratorio_id
            JOIN EstadoSeccion es ON l.estado_seccion_id = es.estado_seccion_id
            WHERE l.aula_id = p_aula_id
              AND l.periodo_academico_id = v_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND ld.dia_id = v_dia_id
              AND l.laboratorio_id != p_laboratorio_id  -- Excluir el propio laboratorio
              AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(l.hora_fin))
              AND (TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(l.hora_inicio));
            
            IF v_conflict_count > 0 THEN
                SIGNAL SQLSTATE '45000' 
                SET MESSAGE_TEXT = 'Conflicto de horario con otro laboratorio activo';
            END IF;
            
            SET v_i = v_i + 1;
        END WHILE;
    END IF;

    -- Actualizar el laboratorio con los nuevos valores
    UPDATE Laboratorio
    SET 
        aula_id = p_aula_id,
        estado_seccion_id = COALESCE(v_estado_seccion_id, estado_seccion_id),
        motivo_cancelacion = CASE 
            WHEN p_estado = 'CANCELADA' THEN p_motivo_cancelacion
            WHEN p_estado = 'ACTIVA' THEN NULL -- Limpiar motivo si se reactiva
            ELSE motivo_cancelacion
        END,
        cupos = p_cupos,
        hora_inicio = p_hora_inicio,
        hora_fin = p_hora_fin
    WHERE laboratorio_id = p_laboratorio_id;

    -- Actualizar días si se proporcionaron
    IF p_dias_json IS NOT NULL THEN
        -- Eliminar días existentes
        DELETE FROM LaboratorioDia WHERE laboratorio_id = p_laboratorio_id;
        
        -- Insertar nuevos días
        SET v_i = 0;
        WHILE v_i < v_dias_count DO
            SET v_dia_id = JSON_EXTRACT(p_dias_json, CONCAT('$[', v_i, ']'));
            INSERT INTO LaboratorioDia (laboratorio_id, dia_id) VALUES (p_laboratorio_id, v_dia_id);
            SET v_i = v_i + 1;
        END WHILE;
    END IF;

    -- Si no se actualizó ninguna fila, se lanza un error
    IF ROW_COUNT() = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se realizaron cambios en el laboratorio';
    END IF;
    
    -- Si se está reactivando el laboratorio, verificar que no haya conflictos
    IF p_estado = 'ACTIVA' AND v_current_estado != 'ACTIVA' THEN
        -- Verificar conflictos con secciones
        SET v_i = 0;
        WHILE v_i < v_dias_count DO
            SET v_dia_id = JSON_EXTRACT(p_dias_json, CONCAT('$[', v_i, ']'));
            
            SELECT COUNT(*) INTO v_conflict_count
            FROM Seccion s
            JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
            JOIN EstadoSeccion es ON s.estado_seccion_id = es.estado_seccion_id
            WHERE s.aula_id = p_aula_id
              AND s.periodo_academico_id = v_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND sd.dia_id = v_dia_id
              AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(s.hora_fin))
              AND (TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(s.hora_inicio));
            
            IF v_conflict_count > 0 THEN
                -- Revertir la activación
                UPDATE Laboratorio
                SET estado_seccion_id = (SELECT estado_seccion_id FROM EstadoSeccion WHERE nombre = 'CANCELADA'),
                    motivo_cancelacion = 'Activación revertida por conflicto con sección'
                WHERE laboratorio_id = p_laboratorio_id;
                
                SIGNAL SQLSTATE '45000' 
                SET MESSAGE_TEXT = 'No se puede reactivar: conflicto de horario con sección activa';
            END IF;
            
            -- Verificar conflictos con otros laboratorios
            SELECT COUNT(*) INTO v_conflict_count
            FROM Laboratorio l
            JOIN LaboratorioDia ld ON l.laboratorio_id = ld.laboratorio_id
            JOIN EstadoSeccion es ON l.estado_seccion_id = es.estado_seccion_id
            WHERE l.aula_id = p_aula_id
              AND l.periodo_academico_id = v_periodo_academico_id
              AND es.nombre = 'ACTIVA'
              AND ld.dia_id = v_dia_id
              AND l.laboratorio_id != p_laboratorio_id
              AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(l.hora_fin))
              AND (TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(l.hora_inicio));
            
            IF v_conflict_count > 0 THEN
                -- Revertir la activación
                UPDATE Laboratorio
                SET estado_seccion_id = (SELECT estado_seccion_id FROM EstadoSeccion WHERE nombre = 'CANCELADA'),
                    motivo_cancelacion = 'Activación revertida por conflicto con laboratorio'
                WHERE laboratorio_id = p_laboratorio_id;
                
                SIGNAL SQLSTATE '45000' 
                SET MESSAGE_TEXT = 'No se puede reactivar: conflicto de horario con laboratorio activo';
            END IF;
            
            SET v_i = v_i + 1;
        END WHILE;
    END IF;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE SP_matricular_estudiante(
    IN p_estudiante_id INT,
    IN p_seccion_id INT,
    IN p_tipo_proceso_nombre VARCHAR(50),
    IN p_laboratorio_id INT
)
BEGIN
    -- Declaración de variables
    DECLARE v_periodo_academico_id INT;
    DECLARE v_estado_seccion VARCHAR(20);
    DECLARE v_estado_laboratorio VARCHAR(20);
    DECLARE v_orden_inscripcion INT DEFAULT NULL;
    DECLARE v_orden_inscripcion_lab INT DEFAULT NULL;
    DECLARE v_requisito INT;
    DECLARE v_cumpleRequisito INT;
    DECLARE v_matricula_id INT;
    DECLARE v_tiene_lab BOOLEAN;
    DECLARE v_seccion_clase_id INT;
    DECLARE v_seccion_hora_inicio TIME;
    DECLARE v_seccion_hora_fin TIME;
    DECLARE v_lab_hora_inicio TIME;
    DECLARE v_lab_hora_fin TIME;
    DECLARE v_creditos_seccion INT;
    DECLARE v_total_creditos INT;
    DECLARE v_cupos INT;
    DECLARE v_totalMatriculados INT;
    DECLARE v_proceso_activo BOOLEAN DEFAULT FALSE;
    DECLARE v_lab_cupos INT;
    DECLARE v_totalMatriculadosLab INT;
    
    -- Declarar el handler
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;

    -- Verificar si el proceso de matrícula está activo
    SELECT EXISTS (
        SELECT 1 FROM ProcesoMatricula pm
        JOIN PeriodoAcademico pa ON pm.periodo_academico_id = pa.periodo_academico_id
        JOIN Seccion s ON pa.periodo_academico_id = s.periodo_academico_id
        WHERE s.seccion_id = p_seccion_id
        AND pm.estado_proceso_id = (SELECT estado_proceso_id FROM EstadoProceso WHERE nombre = 'ACTIVO')
        AND CURDATE() BETWEEN pm.fecha_inicio AND pm.fecha_fin
    ) INTO v_proceso_activo;
    
    IF NOT v_proceso_activo THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El proceso de matrícula no está activo para esta sección';
    END IF;

    -- Obtener el periodo académico directamente desde la sección
    SELECT s.periodo_academico_id, s.hora_inicio, s.hora_fin, c.creditos, s.cupos, 
           c.clase_id, c.tiene_laboratorio
    INTO v_periodo_academico_id, v_seccion_hora_inicio, v_seccion_hora_fin, 
         v_creditos_seccion, v_cupos, v_seccion_clase_id, v_tiene_lab
    FROM Seccion s
    JOIN Clase c ON s.clase_id = c.clase_id
    WHERE s.seccion_id = p_seccion_id;

    IF v_periodo_academico_id IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se encontró el periodo académico de la sección';
    END IF;

    -- Verificar que la sección está activa
    IF NOT EXISTS (
        SELECT 1 FROM Seccion 
        WHERE seccion_id = p_seccion_id 
        AND estado_seccion_id = (SELECT estado_seccion_id FROM EstadoSeccion WHERE nombre = 'ACTIVA')
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La sección no está activa';
    END IF;

    -- Verificar si el estudiante ya aprobó esta clase
    IF EXISTS (
        SELECT 1 FROM HistorialEstudiante h
        JOIN Seccion s ON h.seccion_id = s.seccion_id
        WHERE h.estudiante_id = p_estudiante_id
        AND s.clase_id = v_seccion_clase_id
        AND h.estado_curso_id = (SELECT estado_curso_id FROM EstadoCurso WHERE nombre = 'APROBADA')
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El estudiante ya aprobó esta clase previamente';
    END IF;

    -- Verificar requisitos previos
    SET v_requisito = NULL;
    SET v_cumpleRequisito = 0;

    SELECT prerequisito_clase_id INTO v_requisito FROM ClaseRequisito 
    WHERE clase_id = v_seccion_clase_id
    LIMIT 1;

    IF v_requisito IS NOT NULL THEN
        SELECT COUNT(*) INTO v_cumpleRequisito FROM HistorialEstudiante 
        WHERE estudiante_id = p_estudiante_id 
        AND seccion_id IN (SELECT seccion_id FROM Seccion WHERE clase_id = v_requisito)
        AND estado_curso_id = (SELECT estado_curso_id FROM EstadoCurso WHERE nombre = 'APROBADA');
        
        IF v_cumpleRequisito = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El estudiante no cumple el requisito previo para la clase';
        END IF;
    END IF;

    -- Verificar que el estudiante no está ya matriculado en esta sección
    IF EXISTS (
        SELECT 1 FROM Matricula 
        WHERE estudiante_id = p_estudiante_id 
        AND seccion_id = p_seccion_id
        AND estado_matricula_id IN (
            SELECT estado_matricula_id FROM EstadoMatricula 
            WHERE nombre IN ('MATRICULADO', 'EN_ESPERA')
        )
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El estudiante ya está matriculado en esta sección';
    END IF;

    -- Verificar créditos (límite de 25)
    SELECT IFNULL(SUM(c.creditos), 0) INTO v_total_creditos
    FROM Matricula m
    JOIN Seccion s ON m.seccion_id = s.seccion_id
    JOIN Clase c ON s.clase_id = c.clase_id
    WHERE m.estudiante_id = p_estudiante_id
    AND s.periodo_academico_id = v_periodo_academico_id
    AND m.estado_matricula_id IN (
        SELECT estado_matricula_id FROM EstadoMatricula 
        WHERE nombre IN ('MATRICULADO', 'EN_ESPERA')
    );

    IF (v_total_creditos + v_creditos_seccion) > 25 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La matrícula excede el límite de 25 créditos';
    END IF;

    -- Verificar traslapes con otras secciones del estudiante
    IF EXISTS (
        SELECT 1 FROM Matricula m
        JOIN Seccion s ON m.seccion_id = s.seccion_id
        JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
        JOIN DiaSemana d ON sd.dia_id = d.dia_id
        WHERE m.estudiante_id = p_estudiante_id
        AND s.periodo_academico_id = v_periodo_academico_id
        AND s.seccion_id != p_seccion_id
        AND m.estado_matricula_id IN (
            SELECT estado_matricula_id FROM EstadoMatricula 
            WHERE nombre IN ('MATRICULADO', 'EN_ESPERA')
        )
        AND d.dia_id IN (
            SELECT dia_id FROM SeccionDia WHERE seccion_id = p_seccion_id
        )
        AND (
            (TIME_TO_SEC(s.hora_inicio) < TIME_TO_SEC(v_lab_hora_fin) AND 
            (TIME_TO_SEC(s.hora_fin) > TIME_TO_SEC(v_lab_hora_inicio))
        ))
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La sección se solapa con otra sección ya matriculada por el estudiante';
    END IF;

    -- Verificar cupos disponibles para SECCIÓN
    SELECT COUNT(*) INTO v_totalMatriculados 
    FROM Matricula 
    WHERE seccion_id = p_seccion_id 
    AND estado_matricula_id = (SELECT estado_matricula_id FROM EstadoMatricula WHERE nombre = 'MATRICULADO');

    IF v_totalMatriculados < v_cupos THEN
        SET v_estado_seccion = 'MATRICULADO';
    ELSE
        SET v_estado_seccion = 'EN_ESPERA';
        -- Calcular orden de espera para sección
        SELECT IFNULL(MAX(orden_inscripcion), 0) + 1 INTO v_orden_inscripcion 
        FROM Matricula WHERE seccion_id = p_seccion_id;
    END IF;

    -- Inicializar estado laboratorio como NULL por defecto
    SET v_estado_laboratorio = NULL;
    
    -- Procesar laboratorio si aplica
    IF v_tiene_lab = 1 THEN
        IF p_laboratorio_id IS NULL OR p_laboratorio_id = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Se requiere seleccionar un laboratorio para esta clase';
        END IF;

        -- Validaciones de laboratorio
        IF NOT EXISTS (
            SELECT 1 FROM Laboratorio 
            WHERE laboratorio_id = p_laboratorio_id 
            AND clase_id = v_seccion_clase_id
        ) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El laboratorio no pertenece a esta clase';
        END IF;
        
        -- Obtener información del laboratorio
        SELECT hora_inicio, hora_fin, cupos INTO v_lab_hora_inicio, v_lab_hora_fin, v_lab_cupos 
        FROM Laboratorio WHERE laboratorio_id = p_laboratorio_id;
        
        -- Verificar cupos del laboratorio
        SELECT COUNT(*) INTO v_totalMatriculadosLab 
        FROM Matricula 
        WHERE laboratorio_id = p_laboratorio_id 
        AND estado_laboratorio_id = (SELECT estado_matricula_id FROM EstadoMatricula WHERE nombre = 'MATRICULADO');

        IF v_totalMatriculadosLab >= v_lab_cupos THEN
            SET v_estado_laboratorio = 'EN_ESPERA';
            -- Calcular orden de espera para laboratorio
            SELECT IFNULL(MAX(orden_inscripcion_lab), 0) + 1 INTO v_orden_inscripcion_lab 
            FROM Matricula WHERE laboratorio_id = p_laboratorio_id;
        ELSE
            SET v_estado_laboratorio = 'MATRICULADO';
        END IF;

        -- Verificar que no haya conflicto de horarios entre el laboratorio y la sección
        IF EXISTS (
            SELECT 1 FROM LaboratorioDia ld
            JOIN DiaSemana d ON ld.dia_id = d.dia_id
            JOIN SeccionDia sd ON sd.seccion_id = p_seccion_id AND sd.dia_id = ld.dia_id
            WHERE ld.laboratorio_id = p_laboratorio_id
            AND (
                (TIME_TO_SEC(v_seccion_hora_fin) > TIME_TO_SEC(v_lab_hora_inicio) AND
                TIME_TO_SEC(v_seccion_hora_inicio) < TIME_TO_SEC(v_lab_hora_fin))
            )
        ) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La sección y el laboratorio se solapan en horario';
        END IF;

        -- Verificar que el laboratorio no traslape con otras secciones del estudiante
        IF EXISTS (
            SELECT 1 FROM Matricula m
            JOIN Seccion s ON m.seccion_id = s.seccion_id
            JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
            JOIN DiaSemana d ON sd.dia_id = d.dia_id
            JOIN LaboratorioDia ld ON ld.laboratorio_id = p_laboratorio_id AND ld.dia_id = d.dia_id
            WHERE m.estudiante_id = p_estudiante_id
            AND s.periodo_academico_id = v_periodo_academico_id
            AND m.estado_matricula_id IN (
                SELECT estado_matricula_id FROM EstadoMatricula 
                WHERE nombre IN ('MATRICULADO', 'EN_ESPERA')
            )
            AND (
                (TIME_TO_SEC(s.hora_inicio) < TIME_TO_SEC(v_lab_hora_fin) AND 
                (TIME_TO_SEC(s.hora_fin) > TIME_TO_SEC(v_lab_hora_inicio))
            ))
        ) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El laboratorio se solapa con otra sección ya matriculada';
        END IF;
    END IF;

    -- Insertar matrícula con estados independientes
    INSERT INTO Matricula (
        estudiante_id, 
        seccion_id, 
        laboratorio_id,
        estado_matricula_id,
        estado_laboratorio_id,
        orden_inscripcion,
        orden_inscripcion_lab,
        fecha
    ) VALUES (
        p_estudiante_id, 
        p_seccion_id, 
        IF(v_tiene_lab = 1, p_laboratorio_id, NULL),
        (SELECT estado_matricula_id FROM EstadoMatricula WHERE nombre = v_estado_seccion),
        IF(v_tiene_lab = 1, (SELECT estado_matricula_id FROM EstadoMatricula WHERE nombre = v_estado_laboratorio), NULL),
        IF(v_estado_seccion = 'EN_ESPERA', v_orden_inscripcion, NULL),
        IF(v_estado_laboratorio = 'EN_ESPERA', v_orden_inscripcion_lab, NULL),
        CURDATE()
    );

    SET v_matricula_id = LAST_INSERT_ID();

    COMMIT;
    
    -- Retornar resultados detallados (actualizado)
    SELECT 
        v_matricula_id AS matricula_id,
        -- Estado general combinado
        CASE 
            WHEN v_estado_seccion = 'MATRICULADO' AND 
                 (v_estado_laboratorio = 'MATRICULADO' OR v_estado_laboratorio IS NULL) 
                THEN 'MATRICULACIÓN EXITOSA'
            WHEN v_estado_seccion = 'EN_ESPERA' OR v_estado_laboratorio = 'EN_ESPERA' 
                THEN 'LISTA DE ESPERA'
        END AS estado_general,
        
        -- Información de la sección
        v_estado_seccion AS estado_seccion,
        v_orden_inscripcion AS orden_inscripcion_seccion,
        (SELECT COUNT(*) FROM Matricula 
         WHERE seccion_id = p_seccion_id 
         AND estado_matricula_id = (SELECT estado_matricula_id FROM EstadoMatricula WHERE nombre = 'EN_ESPERA')) AS total_en_espera_seccion,
        
        -- Información del laboratorio
        v_estado_laboratorio AS estado_laboratorio,
        v_orden_inscripcion_lab AS orden_inscripcion_lab,
        IF(v_tiene_lab = 1, 
           (SELECT COUNT(*) FROM Matricula 
            WHERE laboratorio_id = p_laboratorio_id 
            AND estado_laboratorio_id = (SELECT estado_matricula_id FROM EstadoMatricula WHERE nombre = 'EN_ESPERA')), 
           NULL) AS total_en_espera_lab,
        
        -- Datos de referencia
        p_seccion_id AS seccion_id,
        IF(v_tiene_lab = 1, p_laboratorio_id, NULL) AS laboratorio_id;
END //

DELIMITER ;



DELIMITER //
CREATE PROCEDURE SP_actualizar_estado_carrera(
    IN p_aspirante_id INT,
    IN p_carrera_id INT,
    IN p_aprobado BOOLEAN
)
BEGIN
    DECLARE v_estado_id INT;
    
    -- Obtener ID del estado
    IF p_aprobado THEN
        SELECT estado_aspirante_carrera_id INTO v_estado_id
        FROM EstadoAspiranteCarrera
        WHERE nombre = 'APROVADO';
    ELSE
        SELECT estado_aspirante_carrera_id INTO v_estado_id
        FROM EstadoAspiranteCarrera
        WHERE nombre = 'NO_APROVADO';
    END IF;
    
    -- Insertar o actualizar estado
    INSERT INTO AspiranteCarrera 
    (aspirante_id, carrera_id, estado_aspirante_carrera_id)
    VALUES (p_aspirante_id, p_carrera_id, v_estado_id)
    ON DUPLICATE KEY UPDATE 
    estado_aspirante_carrera_id = v_estado_id;
END //
DELIMITER ;

DELIMITER // 
CREATE PROCEDURE SP_evaluar_aprobacion_carrera(
    IN p_aspirante_id INT,
    IN p_carrera_id INT,
    OUT p_aprobado BOOLEAN
)
BEGIN
    DECLARE examenes_faltantes INT;
    
    SELECT COUNT(*) INTO examenes_faltantes
    FROM CarreraExamen ce
    WHERE ce.carrera_id = p_carrera_id
    AND NOT EXISTS (
        SELECT 1 
        FROM ResultadoExamen re
        JOIN TipoExamen te ON re.tipo_examen_id = te.tipo_examen_id
        WHERE re.aspirante_id = p_aspirante_id
        AND re.carrera_id = p_carrera_id
        AND re.tipo_examen_id = ce.tipo_examen_id
        AND re.calificacion >= te.nota_minima
    );
    
    SET p_aprobado = (examenes_faltantes = 0);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_registrar_resultado_examen(
    IN p_aspirante_id INT,
    IN p_tipo_examen_id INT,
    IN p_carrera_id INT,
    IN p_calificacion DECIMAL(4,2),
    OUT p_resultado_id INT
)
BEGIN
    DECLARE v_nota_minima DECIMAL(6,2);
    DECLARE v_resultado_tipo_id INT;
    DECLARE v_examen_pertenece INT DEFAULT 0;
    
    -- Verificar que el examen pertenezca a la carrera
    SELECT COUNT(*) INTO v_examen_pertenece
    FROM CarreraExamen
    WHERE carrera_id = p_carrera_id AND tipo_examen_id = p_tipo_examen_id;
    
    IF v_examen_pertenece = 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'El examen no pertenece a la carrera especificada';
    ELSE
        -- Obtener nota mínima para este examen en esta carrera
        SELECT nota_minima INTO v_nota_minima 
        FROM TipoExamen 
        WHERE tipo_examen_id = p_tipo_examen_id;
        
        -- Determinar resultado
        IF p_calificacion >= v_nota_minima THEN
            SET v_resultado_tipo_id = 1; -- APROBADO
        ELSE
            SET v_resultado_tipo_id = 2; -- NO APROBADO
        END IF;
        
        -- Insertar el resultado (sin ON DUPLICATE KEY porque ahora tenemos clave autoincremental)
        INSERT INTO ResultadoExamen 
        (aspirante_id, tipo_examen_id, carrera_id, fecha_examen, calificacion, resultado_tipo_id)
        VALUES (p_aspirante_id, p_tipo_examen_id, p_carrera_id, CURDATE(), p_calificacion, v_resultado_tipo_id);
        
        SET p_resultado_id = LAST_INSERT_ID();
    END IF;
END //
DELIMITER ;

-- Obtener tipo de examen
DELIMITER //
CREATE PROCEDURE SP_obtener_tipo_examen(
    IN p_nombre VARCHAR(100),
    OUT p_tipo_examen_id INT,
    OUT p_nota_minima DECIMAL(6,2)
)
BEGIN
    SELECT tipo_examen_id, nota_minima INTO p_tipo_examen_id, p_nota_minima
    FROM TipoExamen 
    WHERE nombre = p_nombre;
END //
DELIMITER ;

-- Obtener exámenes de un aspirante
DELIMITER //
CREATE PROCEDURE SP_obtener_examenes_aspirante(
    IN p_aspirante_id INT
)
BEGIN
    SELECT re.tipo_examen_id, te.nombre, re.calificacion, te.nota_minima
    FROM ResultadoExamen re
    JOIN TipoExamen te ON re.tipo_examen_id = te.tipo_examen_id
    WHERE re.aspirante_id = p_aspirante_id;
END //
DELIMITER ;

-- Verificar si examen pertenece a carrera
DELIMITER //
CREATE PROCEDURE SP_es_examen_de_carrera(
    IN p_tipo_examen_id INT,
    IN p_carrera_id INT,
    OUT p_pertenece BOOLEAN
)
BEGIN
    DECLARE v_count INT;
    
    SELECT COUNT(*) INTO v_count
    FROM CarreraExamen
    WHERE tipo_examen_id = p_tipo_examen_id
    AND carrera_id = p_carrera_id;
    
    SET p_pertenece = (v_count > 0);
END //
DELIMITER ;


--EVENTOS

SET GLOBAL event_scheduler = ON;

CREATE EVENT IF NOT EXISTS EV_actualizar_estado_periodo
ON SCHEDULE EVERY 1 MINUTE
DO
   UPDATE PeriodoAcademico
   SET estado = 'INACTIVO'
   WHERE fecha_fin <= NOW() AND estado = 'ACTIVO';
   
   
   

CREATE EVENT IF NOT EXISTS EV_actualizar_estado_proceso_matricula
ON SCHEDULE EVERY 1 MINUTE
DO
   UPDATE ProcesoMatricula
   SET estado = 'INACTIVO'
   WHERE fecha_fin < NOW() AND estado = 'ACTIVO';
   
  
  
  
CREATE EVENT IF NOT EXISTS EV_actualizar_estado_procesos_excepcionales
ON SCHEDULE EVERY 1 MINUTE
DO
   UPDATE ProcesosExcepcionales
   SET estado = 'INACTIVO'
   WHERE fecha_fin < NOW() AND estado = 'ACTIVO';



Expresion regular validacion Identidades

/*
((01(0[1-8]))|(02(0[1-9]|10))|(03(0[1-9]|1[0-9]|2[01]))|(04(0[1-9]|1[0-9]|2[0-3]))|(05(0[1-9]|1[0-2]))|(06(0[1-9]|1[0-6]))|(07(0[1-9]|1[0-9]))|(08(0[1-9]|1[0-9]|2[0-8]))|(09(0[1-6]))|(10(0[1-9]|1[0-7]))|(11(0[1-4]))|(12(0[1-9]|1[0-9]))|(13(0[1-9]|1[0-9]|2[0-8]))|(14(0[1-9]|1[0-6]))|(15(0[1-9]|1[0-9]|2[0-3]))|(16(0[1-9]|1[0-9]|2[0-8]))|(17(0[1-9]))|(18(0[1-9]|1[0-1])))-((19[4-9][0-9])|(20[0-9]{2}))-([0-9]{5}$)
*/

Expresion regular validacion Numeros de telefono

/*
(\+504|504|\(\+504\)|\+\(504\))?[-]?([369][0-9]{3})[-]?([0-9]{4})
*/
