
Use sistemaregistro;

DELIMITER //

CREATE PROCEDURE SP_insertarAspirante(
    IN p_nombre VARCHAR(100),
    IN p_apellido VARCHAR(100),
    IN p_identidad VARCHAR(50),
    IN p_telefono VARCHAR(20),
    IN p_correo VARCHAR(100),
    IN p_foto VARCHAR(255),
    IN p_carrera_principal_id INT,
    IN p_carrera_secundaria_id INT,
    IN p_centro_id INT,
    IN p_certificado_url VARCHAR(255)
)
BEGIN
    DECLARE v_numSolicitud VARCHAR(50);
    
    -- Generar el número de solicitud (puedes ajustar el método de generación)
    SET v_numSolicitud = CONCAT('SOL-', UNIX_TIMESTAMP());
    
    -- Insertar el aspirante con estado "PENDIENTE" y campos nulos para revisor y motivo
    INSERT INTO Aspirante (
        nombre, apellido, identidad, telefono, correo, foto, numSolicitud,
        carrera_principal_id, carrera_secundaria_id, centro_id, certificado_url,
        estado, motivo_rechazo, revisor_usuario_id
    ) VALUES (
        p_nombre, p_apellido, p_identidad, p_telefono, p_correo, p_foto, v_numSolicitud,
        p_carrera_principal_id, p_carrera_secundaria_id, p_centro_id, p_certificado_url,
        'PENDIENTE', NULL, NULL
    );
    
    -- Puedes retornar el ID insertado si lo deseas
    SELECT LAST_INSERT_ID() AS aspirante_id;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_asignarUsuarioDocente(
    IN p_docente_id INT,
    IN p_username VARCHAR(100),
    IN p_password VARCHAR(100)
)
BEGIN
    DECLARE v_rol_id INT;
    DECLARE v_usuario_id INT;

    -- Verificar que el docente exista y que aún no tenga usuario asignado
    IF (SELECT COUNT(*) FROM Docente WHERE docente_id = p_docente_id AND usuario_id IS NOT NULL) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El docente ya tiene credenciales asignadas';
    END IF;

    -- Obtener el rol "docente"
    SELECT rol_id INTO v_rol_id FROM Rol WHERE nombre = 'docente' LIMIT 1;
    IF v_rol_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Rol docente no encontrado en el sistema';
    END IF;

    -- Insertar el nuevo usuario en la tabla Usuario
    INSERT INTO Usuario (username, password, rol_id)
    VALUES (p_username, p_password, v_rol_id);
    
    -- Obtener el ID del usuario recién insertado
    SET v_usuario_id = LAST_INSERT_ID();
    
    -- Actualizar el registro del docente para asignarle el usuario
    UPDATE Docente
    SET usuario_id = v_usuario_id
    WHERE docente_id = p_docente_id;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE SP_crearSeccion(
    IN p_clase_id INT,
    IN p_docente_id INT,
    IN p_periodo_academico_id INT,
    IN p_aula_id INT,
    IN p_hora_inicio TIME,
    IN p_hora_fin TIME,
    IN p_cupos INT,
    IN p_dias VARCHAR(255)
)
BEGIN
    DECLARE v_creditos INT;
    DECLARE v_duracion DECIMAL(5,2);
    DECLARE v_numDias INT;
    DECLARE v_totalDays INT;
    DECLARE v_counter INT DEFAULT 1;
    DECLARE v_day VARCHAR(50);
    DECLARE v_section_id INT;
    DECLARE v_estado ENUM('ACTIVO','INACTIVO');

    -- Verificar que el período académico esté activo
    SELECT estado INTO v_estado FROM PeriodoAcademico WHERE periodo_academico_id = p_periodo_academico_id;
    IF v_estado <> 'ACTIVO' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El período académico no está activo';
    END IF;

    -- Verificar que la hora de inicio sea menor a la de fin
    IF p_hora_inicio >= p_hora_fin THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La hora de inicio debe ser menor a la hora de fin';
    END IF;

    -- Obtener créditos de la clase
    SELECT creditos INTO v_creditos FROM Clase WHERE clase_id = p_clase_id;
    IF v_creditos IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Clase no encontrada';
    END IF;

    -- Calcular duración en horas
    SET v_duracion = (TIME_TO_SEC(p_hora_fin) - TIME_TO_SEC(p_hora_inicio)) / 3600;

    -- Calcular número de días recibido (cadena separada por comas)
    IF p_dias = '' THEN
        SET v_numDias = 0;
    ELSE
        SET v_numDias = LENGTH(p_dias) - LENGTH(REPLACE(p_dias, ',', '')) + 1;
    END IF;
    SET v_totalDays = v_numDias;

    IF v_totalDays = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Debe especificarse al menos un día';
    END IF;

    -- Validar la regla según la cantidad de días y créditos:
    IF v_totalDays > 1 THEN
        IF v_totalDays <> v_creditos THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El número de días no coincide con los créditos de la clase';
        END IF;
        IF ABS(v_duracion - 1) > 0.01 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Para secciones en varios días, cada sesión debe durar 1 hora';
        END IF;
    ELSEIF v_totalDays = 1 THEN
        IF ABS(v_duracion - v_creditos) > 0.01 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Para secciones en un solo día, la duración total debe ser igual a los créditos de la clase';
        END IF;
    END IF;

    -- Verificar traslapes en el aula y traslapes en el docente para cada día
    SET v_counter = 1;
    WHILE v_counter <= v_totalDays DO
        SET v_day = TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(p_dias, ',', v_counter), ',', -1));

        -- Verificar traslape en el aula
        IF EXISTS (
            SELECT 1
            FROM Seccion s
            INNER JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
            WHERE s.aula_id = p_aula_id
              AND sd.dia = v_day
              AND s.periodo_academico_id = p_periodo_academico_id
              AND s.estado = 'ACTIVA'
              AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(s.hora_fin)
                   AND TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(s.hora_inicio))
        ) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Conflicto de horario en el aula para el día especificado';
        END IF;

        -- Verificar traslape en el docente
        IF EXISTS (
            SELECT 1
            FROM Seccion s
            INNER JOIN SeccionDia sd ON s.seccion_id = sd.seccion_id
            WHERE s.docente_id = p_docente_id
              AND sd.dia = v_day
              AND s.periodo_academico_id = p_periodo_academico_id
              AND s.estado = 'ACTIVA'
              AND (TIME_TO_SEC(p_hora_inicio) < TIME_TO_SEC(s.hora_fin)
                   AND TIME_TO_SEC(p_hora_fin) > TIME_TO_SEC(s.hora_inicio))
        ) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El docente ya tiene una sección asignada en ese horario para el día especificado';
        END IF;

        SET v_counter = v_counter + 1;
    END WHILE;

    -- Insertar la sección (incluyendo cupos)
    INSERT INTO Seccion (clase_id, docente_id, periodo_academico_id, hora_inicio, hora_fin, aula_id, estado, cupos)
    VALUES (p_clase_id, p_docente_id, p_periodo_academico_id, p_hora_inicio, p_hora_fin, p_aula_id, 'ACTIVA', p_cupos);
    SET v_section_id = LAST_INSERT_ID();

    -- Insertar cada día en la tabla SeccionDia
    SET v_counter = 1;
    WHILE v_counter <= v_totalDays DO
        SET v_day = TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(p_dias, ',', v_counter), ',', -1));
        INSERT INTO SeccionDia (seccion_id, dia) VALUES (v_section_id, v_day);
        SET v_counter = v_counter + 1;
    END WHILE;

    SELECT v_section_id AS seccion_id;
END //

DELIMITER ;


CREATE PROCEDURE SP_modificar_seccion(
    IN p_seccion_id INT,
    IN p_docente_id INT,         -- Si se desea actualizar, se envía un valor; de lo contrario, NULL.
    IN p_aula_id INT,            -- Igual que p_docente_id.
    IN p_estado VARCHAR(20),     -- Se espera 'ACTIVA' o 'CANCELADA'. Si es NULL, no se modifica.
    IN p_motivo_cancelacion TEXT -- Se utiliza si p_estado es 'CANCELADA'.
)
BEGIN
    -- Si se intenta cancelar, se requiere un motivo de cancelación.
    IF p_estado = 'CANCELADA' AND (p_motivo_cancelacion IS NULL OR TRIM(p_motivo_cancelacion) = '') THEN
       SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Debe proporcionar motivo de cancelación';
    END IF;
    
    UPDATE Seccion
    SET 
       docente_id = COALESCE(p_docente_id, docente_id),
       aula_id = COALESCE(p_aula_id, aula_id),
       estado = COALESCE(p_estado, estado),
       motivo_cancelacion = CASE 
                               WHEN p_estado = 'CANCELADA' THEN p_motivo_cancelacion
                               ELSE motivo_cancelacion
                            END
    WHERE seccion_id = p_seccion_id;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE SP_matricular_estudiante(
    IN p_estudiante_id INT,
    IN p_seccion_id INT,
    IN p_tipo_proceso VARCHAR(50)
)
BEGIN
    -- Declaración de variables
    DECLARE v_proceso_id INT;
    DECLARE v_periodo_academico_id INT;
    DECLARE v_fecha_inicio DATETIME;
    DECLARE v_estado_proceso VARCHAR(20);
    DECLARE v_indice_global DECIMAL(5,2);
    DECLARE v_diaMatricula INT;
    DECLARE v_rango_min DECIMAL(5,2);
    DECLARE v_rango_max DECIMAL(5,2);
    DECLARE v_cupos INT;
    DECLARE v_totalMatriculados INT;
    DECLARE v_estadoMatricula VARCHAR(20);
    DECLARE v_orden_inscripcion INT DEFAULT NULL;
    DECLARE v_requisito INT;
    DECLARE v_cumpleRequisito INT;
    DECLARE v_lab_seccion_id INT;
    DECLARE v_lab_cupos INT;
    DECLARE v_lab_totalMatriculados INT;
    DECLARE v_lab_estadoMatricula VARCHAR(20);
    DECLARE v_lab_orden_inscripcion INT DEFAULT NULL;
    DECLARE v_matricula_id INT;
    DECLARE v_tiene_lab INT;

    -- 1. Obtener proceso activo
    SELECT proceso_id, periodo_academico_id, fecha_inicio, estado
      INTO v_proceso_id, v_periodo_academico_id, v_fecha_inicio, v_estado_proceso
    FROM ProcesoMatricula
    WHERE UPPER(tipo_proceso) = UPPER(p_tipo_proceso) AND estado = 'ACTIVO'
    LIMIT 1;
    
    IF v_proceso_id IS NULL THEN
       SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No hay proceso activo';
    END IF;
    
    -- 2. Validar índice global si es MATRICULA
    IF UPPER(p_tipo_proceso) = 'MATRICULA' THEN
       SELECT indice_global INTO v_indice_global FROM Estudiante WHERE estudiante_id = p_estudiante_id;
       IF v_indice_global IS NULL THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Estudiante no encontrado';
       END IF;
       SET v_diaMatricula = FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(v_fecha_inicio)) / 86400) + 1;
       
       IF v_diaMatricula = 1 THEN
          SET v_rango_min = 80; SET v_rango_max = 100;
       ELSEIF v_diaMatricula = 2 THEN
          SET v_rango_min = 60; SET v_rango_max = 79;
       ELSEIF v_diaMatricula = 3 THEN
          SET v_rango_min = 0; SET v_rango_max = 59;
       ELSE
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Día de matrícula no definido';
       END IF;
       
       IF v_indice_global < v_rango_min OR v_indice_global > v_rango_max THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El índice global no corresponde al día de matrícula actual';
       END IF;
    END IF;
    
    -- 3. Verificar requisitos previos
    SET v_requisito = NULL;
    SET v_cumpleRequisito = 0;
    
    SELECT requisito_id INTO v_requisito FROM ClaseRequisito 
      WHERE clase_id = (SELECT clase_id FROM Seccion WHERE seccion_id = p_seccion_id)
      LIMIT 1;
      
    IF v_requisito IS NOT NULL THEN
       SELECT COUNT(*) INTO v_cumpleRequisito FROM HistorialEstudiante 
         WHERE estudiante_id = p_estudiante_id 
           AND seccion_id IN (SELECT seccion_id FROM Seccion WHERE clase_id = v_requisito)
           AND estado = 'APROBADA';
       IF v_cumpleRequisito = 0 THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El estudiante no cumple el requisito previo para la clase';
       END IF;
    END IF;
    
    -- 4. Verificar traslapes horarios
    IF EXISTS (
       SELECT 1 FROM Seccion s
       INNER JOIN Matricula m ON s.seccion_id = m.seccion_id
       WHERE m.estudiante_id = p_estudiante_id
         AND s.periodo_academico_id = v_periodo_academico_id
         AND m.estado IN ('MATRICULADO', 'EN ESPERA')
         AND (TIME_TO_SEC((SELECT hora_fin FROM Seccion WHERE seccion_id = p_seccion_id)) > TIME_TO_SEC(s.hora_inicio)
              AND TIME_TO_SEC((SELECT hora_inicio FROM Seccion WHERE seccion_id = p_seccion_id)) < TIME_TO_SEC(s.hora_fin))
    ) THEN
       SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El horario de la sección traslapa con otra en la que el estudiante ya está matriculado';
    END IF;
    
    -- 5. Verificar cupos en la sección
    SELECT cupos INTO v_cupos FROM Seccion WHERE seccion_id = p_seccion_id;
    IF v_cupos IS NULL THEN
       SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Sección no encontrada';
    END IF;
    
    SELECT COUNT(*) INTO v_totalMatriculados FROM Matricula 
      WHERE seccion_id = p_seccion_id AND estado = 'MATRICULADO';
    
    IF v_totalMatriculados >= v_cupos THEN
       SET v_estadoMatricula = 'EN ESPERA';
       SELECT IFNULL(MAX(orden_inscripcion), 0) + 1 INTO v_orden_inscripcion 
         FROM Matricula WHERE seccion_id = p_seccion_id;
    ELSE
       SET v_estadoMatricula = 'MATRICULADO';
    END IF;
    
    -- 6. Insertar matrícula para la sección principal
    INSERT INTO Matricula (estudiante_id, seccion_id, estado, orden_inscripcion)
      VALUES (p_estudiante_id, p_seccion_id, v_estadoMatricula, v_orden_inscripcion);
      
    -- Almacenar el ID de matrícula principal para retorno.
    SET v_matricula_id = LAST_INSERT_ID();
    
    -- 7. Verificar matrícula en laboratorio (si aplica)
    SELECT tiene_laboratorio INTO v_tiene_lab FROM Clase WHERE clase_id = (SELECT clase_id FROM Seccion WHERE seccion_id = p_seccion_id);
    
    IF v_tiene_lab = 1 THEN
        SELECT laboratorio_id INTO v_lab_seccion_id 
          FROM Laboratorio 
          WHERE clase_id = (SELECT clase_id FROM Seccion WHERE seccion_id = p_seccion_id)
            AND periodo_academico_id = v_periodo_academico_id
            AND estado = 'ACTIVO'
          LIMIT 1;
          
        IF v_lab_seccion_id IS NOT NULL THEN
            SELECT cupos INTO v_lab_cupos FROM Laboratorio WHERE laboratorio_id = v_lab_seccion_id;
            SELECT COUNT(*) INTO v_lab_totalMatriculados FROM Matricula 
              WHERE seccion_id = v_lab_seccion_id AND estado = 'MATRICULADO';
              
            IF v_lab_totalMatriculados >= v_lab_cupos THEN
                SET v_lab_estadoMatricula = 'EN ESPERA';
                SELECT IFNULL(MAX(orden_inscripcion), 0) + 1 INTO v_lab_orden_inscripcion 
                  FROM Matricula WHERE seccion_id = v_lab_seccion_id;
            ELSE
                SET v_lab_estadoMatricula = 'MATRICULADO';
            END IF;
            
            INSERT INTO Matricula (estudiante_id, seccion_id, estado, orden_inscripcion)
                VALUES (p_estudiante_id, v_lab_seccion_id, v_lab_estadoMatricula, v_lab_orden_inscripcion);
        END IF;
    END IF;
    
    -- 8. Retornar resultados
    SELECT v_matricula_id AS matricula_id, v_estadoMatricula AS estado, v_orden_inscripcion AS orden_inscripcion;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE SP_actualizarListaEspera(
    IN p_seccion_id INT
)
BEGIN
    DECLARE v_matricula_id INT;

    -- Selecciona el primer estudiante en la lista de espera (el de menor orden_inscripcion)
    SELECT matricula_id
    INTO v_matricula_id
    FROM Matricula
    WHERE seccion_id = p_seccion_id
      AND estado = 'EN ESPERA'
    ORDER BY orden_inscripcion ASC
    LIMIT 1;

    -- Si se encontró algún estudiante en espera, se actualiza su estado a MATRÍCULADO
    IF v_matricula_id IS NOT NULL THEN
        UPDATE Matricula
        SET estado = 'MATRICULADO', orden_inscripcion = NULL
        WHERE matricula_id = v_matricula_id;

        -- Opcional: ajustar el orden de inscripción para los restantes
        UPDATE Matricula
        SET orden_inscripcion = orden_inscripcion - 1
        WHERE seccion_id = p_seccion_id
          AND estado = 'EN ESPERA';
    END IF;
END //

DELIMITER ;


--EVENTOS

SET GLOBAL event_scheduler = ON; --Solo la primera vez
DELIMITER //

CREATE EVENT EV_actualizar_periodos
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
    UPDATE PeriodoAcademico
    SET estado = 'INACTIVO'
    WHERE fecha_fin < NOW() AND estado = 'ACTIVO';

DELIMITER ;

DELIMITER //

CREATE EVENT EV_actualizar_procesos_matricula
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
    UPDATE ProcesoMatricula
    SET estado = 'INACTIVO'
    WHERE fecha_fin < NOW() AND estado = 'ACTIVO';

DELIMITER ;

